/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_RENDER_RENDERER "Renderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer\nObject wrapping a 2D rendering context for a window"
#define DOC_RENDER_RENDERER_BLIT "blit(source, dest=None, area=None, special_flags=0) -> Rect\nDraw textures using a Surface-like API"
#define DOC_RENDER_RENDERER_CLEAR "clear() -> None\nClear the current rendering target with the drawing color"
#define DOC_RENDER_RENDERER_DRAWLINE "draw_line(p1, p2) -> None\nDraw a line"
#define DOC_RENDER_RENDERER_DRAWPOINT "draw_point(point) -> None\nDraw a point"
#define DOC_RENDER_RENDERER_DRAWQUAD "draw_quad(p1, p2, p3, p4) -> None\nDraw a quad outline"
#define DOC_RENDER_RENDERER_DRAWRECT "draw_rect(rect) -> None\nDraw a rectangle outline"
#define DOC_RENDER_RENDERER_DRAWTRIANGLE "draw_triangle(p1, p2, p3) -> None\nDraw a triangle outline"
#define DOC_RENDER_RENDERER_FILLQUAD "fill_quad(p1, p2, p3, p4) -> None\nDraw a filled quad"
#define DOC_RENDER_RENDERER_FILLRECT "fill_rect(rect) -> None\nDraw a filled rectangle"
#define DOC_RENDER_RENDERER_FILLTRIANGLE "fill_triangle(p1, p2, p3) -> None\nDraw a filled triangle"
#define DOC_RENDER_RENDERER_GETVIEWPORT "get_viewport() -> Rect\nGet the drawing area on the rendering target"
#define DOC_RENDER_RENDERER_PRESENT "present() -> None\nUpdate the screen with any rendering performed since the previous call"
#define DOC_RENDER_RENDERER_SETVIEWPORT "set_viewport(area) -> None\nSet the drawing area on the rendering target"
#define DOC_RENDER_RENDERER_TOSURFACE "to_surface(surface=None, area=None) -> Surface\nRead pixels from current rendering target and create a Surface (slow operation, use sparingly)"
#define DOC_RENDER_RENDERER_DRAWBLENDMODE "draw_blend_mode -> int\nGet or set the blend mode used for primitive drawing operations"
#define DOC_RENDER_RENDERER_DRAWCOLOR "draw_color -> Color\nGet or set the color used for primitive drawing operations"
#define DOC_RENDER_RENDERER_LOGICALSIZE "logical_size -> tuple[int, int]\nGet or set the logical Renderer size (a device independent resolution for rendering)"
#define DOC_RENDER_RENDERER_SCALE "scale -> tuple[float, float]\nGet the drawing scale for the current rendering target"
#define DOC_RENDER_RENDERER_TARGET "target -> Texture\nGet or set the current rendering target"
#define DOC_RENDER_RENDERER_COMPOSECUSTOMBLENDMODE "compose_custom_blend_mode(color_mode, alpha_mode) -> int\nCompose a custom blend mode"
#define DOC_RENDER_RENDERER_FROMWINDOW "from_window(window) -> Renderer\nCreate a Renderer from an existing window"

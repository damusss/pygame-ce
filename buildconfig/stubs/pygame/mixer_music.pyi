from typing import Optional, Union, Dict, List, Tuple

from ._common import FileArg

def load(filename: FileArg, namehint: Optional[str] = "") -> None: ...
def unload() -> None: ...
def play(loops: int = 0, start: float = 0.0, fade_ms: int = 0) -> None: ...
def rewind() -> None: ...
def stop() -> None: ...
def pause() -> None: ...
def unpause() -> None: ...
def fadeout(time: int, /) -> None: ...
def set_volume(volume: float, /) -> None: ...
def get_volume() -> float: ...
def get_busy() -> bool: ...
def set_pos(pos: float, /) -> None: ...
def get_pos() -> int: ...
def queue(filename: FileArg, namehint: str = "", loops: int = 0) -> None: ...
def set_endevent(event_type: int, /) -> None: ...
def get_endevent() -> int: ...
def get_metadata(filename: Optional[FileArg] = None, namehint: str = "") -> Dict[str, str]: ...


class Queue:
    def __init__(self, filenames: Optional[List[Union[str, Tuple[str, int]]]] = None) -> None: ...
    @property
    def filenames(self) -> List[str]: ...
    @filenames.setter
    def filenames(self, v: list[List[Union[str, Tuple[str, int]]]]): ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, v: int): ...

    def add(self, filename: str, loops: int = 0) -> None: ...
    def remove(self, filename: str) -> None: ...
    def pop(self, index: int) -> str: ...
    def get_busy(self) -> bool: ...
    def get_current(self) -> int: ...
    def get_next(self) -> int: ...
    def play(self, loops: int = 0, fade_ms: int = 0, index: int = 0) -> None: ...
    def play_next(self, loop: bool = True) -> None: ...
    def play_previous(self, loop: bool = True) -> None: ...
    def play_at(self, index: int) -> None: ...
    def stop(self) -> None: ...
    def resume(self) -> None: ...
    def restart(self) -> None: ...
